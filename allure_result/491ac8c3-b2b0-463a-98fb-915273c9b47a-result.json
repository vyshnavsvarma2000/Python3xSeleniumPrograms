{"name": "Verify the Handling of SVG element ", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <path cs=\"100,100\" d=\"M502.437,406.262L503.396,406.691L503.396,406.691L503.397,407.691L504.265,409.544L503.016,412.515L504.77,412.459L504.77,412.459L505.611,414.854L505.136,417.41L505.448,418.438L505.08,419.1L505.492,420.21L505.263,421.257L504.672,421.129L504.312,421.639L504.563,422.373L503.99,422.414L504.181,424.378L504.181,424.378L503.74,424.48L503.25,425.999L503.117,425.139L502.465,424.79L502.335,424.063L501.975,424.127L500.039,426.287L499.044,425.984L498.217,424.353L497.768,424.399L497.353,425.442L498.04,429.971L497.343,430.273L497.342,430.988L496.54,430.901L495.364,431.836L493.847,434.605L495.115,438.741L494.69,439.32L493.922,439.393L492.783,441.154L492.245,440.84L491.278,441.081L490.288,441.894L489.512,441.525L488.041,437.436L488.322,436.78L487.555,436.626L487.8,436.097L487.25,435.135L486.496,435.128L485.767,436.839L486.46,439.56L485.532,439.451L484.542,437.332L484.583,435.179L484.041,434.322L484.358,434.059L483.85,433.633L484.443,432.695L483.837,432.873L482.939,429.806L481.957,429.169L482.19,428.474L481.802,428.482L481.098,427.251L481.002,425.697L481.79,426.234L482.023,425.312L480.939,425.229L480.984,424.132L481.72,423.817L482.328,424.117L483.02,421.853L482.494,420.861L482.849,420.176L482.551,419.827L483.41,419.881L483.317,419.03L483.565,418.587L483.899,418.823L484.041,418.234L485.543,418.729L485.927,417.031L485.54,415.705L489.04,416.466L490.9,415.862L491.447,413.924L491.193,413.313L491.601,412.946L491.965,414.34L492.945,414.955L493.582,414.932L493.19,412.564L494.699,413.437L495.367,412.994L495.247,413.692L496.221,415.076L496.674,414.957L497.344,412.098L496.895,410.541L497.663,410.072L498.464,410.871L498.018,409.332L501.056,409.442L501.473,408.514L502.177,408.366L501.751,406.779L501.823,406.231z\" transform=\"translate(0,-162)\" stroke-width=\"0.6905249633789062\" fill=\"#FFFFFF\" fill-opacity=\"0.8\" stroke=\"#000000\" stroke-opacity=\"0.5\" class=\"\" role=\"menuitem\" aria-label=\"Tripura  \"></path> is not clickable at point (894, 666). Other element would receive the click: <div id=\"notices\" class=\"trans-all\">...</div>\n  (Session info: chrome=125.0.6422.142)\nStacktrace:\n\tGetHandleVerifier [0x00007FF79B371F52+60322]\n\t(No symbol) [0x00007FF79B2ECEC9]\n\t(No symbol) [0x00007FF79B1A7EBA]\n\t(No symbol) [0x00007FF79B1FF32E]\n\t(No symbol) [0x00007FF79B1FCCF2]\n\t(No symbol) [0x00007FF79B1FA18B]\n\t(No symbol) [0x00007FF79B1F9356]\n\t(No symbol) [0x00007FF79B1EB491]\n\t(No symbol) [0x00007FF79B21C21A]\n\t(No symbol) [0x00007FF79B1EADB6]\n\t(No symbol) [0x00007FF79B21C430]\n\t(No symbol) [0x00007FF79B23BC80]\n\t(No symbol) [0x00007FF79B21BFC3]\n\t(No symbol) [0x00007FF79B1E9617]\n\t(No symbol) [0x00007FF79B1EA211]\n\tGetHandleVerifier [0x00007FF79B6894AD+3301629]\n\tGetHandleVerifier [0x00007FF79B6D36D3+3605283]\n\tGetHandleVerifier [0x00007FF79B6C9450+3563680]\n\tGetHandleVerifier [0x00007FF79B424326+790390]\n\t(No symbol) [0x00007FF79B2F750F]\n\t(No symbol) [0x00007FF79B2F3404]\n\t(No symbol) [0x00007FF79B2F3592]\n\t(No symbol) [0x00007FF79B2E2F9F]\n\tBaseThreadInitThunk [0x00007FFC4811257D+29]\n\tRtlUserThreadStart [0x00007FFC48DAAF28+40]", "trace": "@pytest.mark.smoke\n    @allure.title(\"Verify the Handling of SVG element \")\n    @allure.description(\"Verify the Handling of SVG element in the amcharts SVG Map\")\n    def test_svgelements():\n        driver = webdriver.Chrome()\n        driver.get(\"https://www.amcharts.com/svg-maps/?map=india\")\n        driver.maximize_window()\n        states = driver.find_elements(By.XPATH, \"//*[name()='svg']/*[name()='g'][7]/*[name()='g']/*[name()='g']/*[name()='path']\")\n        for state in states:\n            print(state.get_attribute(\"aria-label\"))\n            if \"Tripura\" in state.get_attribute(\"aria-label\"):\n>               state.click()\n\nsvg_shadow_dom\\test_Lab18.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023089FBD730>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF79B2E2F9F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC4811257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC48DAAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <path cs=\"100,100\" d=\"M502.437,406.262L503.396,406.691L503.396,406.691L503.397,407.691L504.265,409.544L503.016,412.515L504.77,412.459L504.77,412.459L505.611,414.854L505.136,417.41L505.448,418.438L505.08,419.1L505.492,420.21L505.263,421.257L504.672,421.129L504.312,421.639L504.563,422.373L503.99,422.414L504.181,424.378L504.181,424.378L503.74,424.48L503.25,425.999L503.117,425.139L502.465,424.79L502.335,424.063L501.975,424.127L500.039,426.287L499.044,425.984L498.217,424.353L497.768,424.399L497.353,425.442L498.04,429.971L497.343,430.273L497.342,430.988L496.54,430.901L495.364,431.836L493.847,434.605L495.115,438.741L494.69,439.32L493.922,439.393L492.783,441.154L492.245,440.84L491.278,441.081L490.288,441.894L489.512,441.525L488.041,437.436L488.322,436.78L487.555,436.626L487.8,436.097L487.25,435.135L486.496,435.128L485.767,436.839L486.46,439.56L485.532,439.451L484.542,437.332L484.583,435.179L484.041,434.322L484.358,434.059L483.85,433.633L484.443,432.695L483.837,432.873L482.939,429.806L481.957,429.169L482.19,428.474L481.802,428.482L481.098,427.251L481.002,425.697L481.79,426.234L482.023,425.312L480.939,425.229L480.984,424.132L481.72,423.817L482.328,424.117L483.02,421.853L482.494,420.861L482.849,420.176L482.551,419.827L483.41,419.881L483.317,419.03L483.565,418.587L483.899,418.823L484.041,418.234L485.543,418.729L485.927,417.031L485.54,415.705L489.04,416.466L490.9,415.862L491.447,413.924L491.193,413.313L491.601,412.946L491.965,414.34L492.945,414.955L493.582,414.932L493.19,412.564L494.699,413.437L495.367,412.994L495.247,413.692L496.221,415.076L496.674,414.957L497.344,412.098L496.895,410.541L497.663,410.072L498.464,410.871L498.018,409.332L501.056,409.442L501.473,408.514L502.177,408.366L501.751,406.779L501.823,406.231z\" transform=\"translate(0,-162)\" stroke-width=\"0.6905249633789062\" fill=\"#FFFFFF\" fill-opacity=\"0.8\" stroke=\"#000000\" stroke-opacity=\"0.5\" class=\"\" role=\"menuitem\" aria-label=\"Tripura  \"></path> is not clickable at point (894, 666). Other element would receive the click: <div id=\"notices\" class=\"trans-all\">...</div>\nE         (Session info: chrome=125.0.6422.142)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF79B371F52+60322]\nE       \t(No symbol) [0x00007FF79B2ECEC9]\nE       \t(No symbol) [0x00007FF79B1A7EBA]\nE       \t(No symbol) [0x00007FF79B1FF32E]\nE       \t(No symbol) [0x00007FF79B1FCCF2]\nE       \t(No symbol) [0x00007FF79B1FA18B]\nE       \t(No symbol) [0x00007FF79B1F9356]\nE       \t(No symbol) [0x00007FF79B1EB491]\nE       \t(No symbol) [0x00007FF79B21C21A]\nE       \t(No symbol) [0x00007FF79B1EADB6]\nE       \t(No symbol) [0x00007FF79B21C430]\nE       \t(No symbol) [0x00007FF79B23BC80]\nE       \t(No symbol) [0x00007FF79B21BFC3]\nE       \t(No symbol) [0x00007FF79B1E9617]\nE       \t(No symbol) [0x00007FF79B1EA211]\nE       \tGetHandleVerifier [0x00007FF79B6894AD+3301629]\nE       \tGetHandleVerifier [0x00007FF79B6D36D3+3605283]\nE       \tGetHandleVerifier [0x00007FF79B6C9450+3563680]\nE       \tGetHandleVerifier [0x00007FF79B424326+790390]\nE       \t(No symbol) [0x00007FF79B2F750F]\nE       \t(No symbol) [0x00007FF79B2F3404]\nE       \t(No symbol) [0x00007FF79B2F3592]\nE       \t(No symbol) [0x00007FF79B2E2F9F]\nE       \tBaseThreadInitThunk [0x00007FFC4811257D+29]\nE       \tRtlUserThreadStart [0x00007FFC48DAAF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "description": "Verify the Handling of SVG element in the amcharts SVG Map", "start": 1724487297645, "stop": 1724487303721, "uuid": "bce99708-84d2-48d8-914b-4b3a798da198", "historyId": "43cc1817804bd2cc9b74143816f67bf1", "testCaseId": "43cc1817804bd2cc9b74143816f67bf1", "fullName": "svg_shadow_dom.test_Lab18#test_svgelements", "labels": [{"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "svg_shadow_dom"}, {"name": "suite", "value": "test_Lab18"}, {"name": "host", "value": "LAPTOP-BELRSIMA"}, {"name": "thread", "value": "5396-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "svg_shadow_dom.test_Lab18"}]}